E567 Permutation in String

Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1.
In other words, one of the first string's permutations is the substring of the second string.
====
#SlidingWindow
#FillInHoles
====
@MYSOL
@检测最近一次key的累积个数
>>>>
public class Solution {
    public boolean checkInclusion(String s1, String s2) {
        if (s1.length() == 0){
            return true;
        }
        int[] a = new int[128];
        for (int i=0; i < s1.length(); ++i){
            --a[s1.charAt(i)];
        }
        //由s1挖坑完
        int l = 0;
        int r = 0;
        while (r < s2.length()){
            ++a[s2.charAt(r)];
            ++r;
            //r-1是前一位
            while (a[s2.charAt(r - 1)] > 0){
                --a[s2.charAt(l)];
                ++l;
            }
            //System.out.println(l + " "+ r);
            if(r - l == s1.length()){
                return true;
            }
        }
        return false;
    }
}
<<<<
====
@示例
@ ascii 数组
int[128] is char=>count map
@while(--count[s2.charAt(l++)] != 0):
count[s2.charAt(l)] -= 1;
while(count[s2.charAt(l)] != 0){
  l += 1
  //...
  count[s2.charAt(l)] -= 1;
}
>>>>
public boolean checkInclusion(String s1, String s2) {
  int[] count = new int[128];
  for(int i = 0; i < s1.length(); i++){
    count[s1.charAt(i)]--;
  }

  for(int l = 0, r = 0; r < s2.length(); r++) {
    count[s2.charAt(r))]++;
    if (count[s2.charAt(r)] > 0){
      count[s2.charAt(l)]--;
      while(count[s2.charAt(l+1)] != 0){
        l++;
      }
    }
    else if ((r - l + 1) == s1.length()){
      return true;
    }
  }
  return s1.length() == 0;
}
<<<<
